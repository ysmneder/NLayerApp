// <auto-generated />
using System;
using App.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Core.Models.Bag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BagStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeliveryPointId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("VolumetricWeight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BagStatusId");

                    b.HasIndex("DeliveryPointId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bag");
                });

            modelBuilder.Entity("App.Core.Models.BagStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BagStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8457e93b-0383-42d6-86a3-e2fc96476d59"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Created",
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("797f1aee-89d0-475d-bb60-f68e399eda93"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Loaded",
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("5c9d1ec5-0f69-46aa-9245-52d2c5ec7d8e"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Unloaded",
                            Value = 3
                        });
                });

            modelBuilder.Entity("App.Core.Models.DeliveryPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryPointName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPoint");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90f205d0-ac7e-44f0-b495-0a80edfbe3a1"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryPointName = "Branch",
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("6585ed77-e248-4269-bea4-1919a1cdb498"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryPointName = "Distribution Center",
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("cc95ffec-932f-4ce2-ad6a-556e76a99f11"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DeliveryPointName = "Transfer Center",
                            Value = 3
                        });
                });

            modelBuilder.Entity("App.Core.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedBagBarcode")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeliveryPointId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PackageStatusId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("VolumetricWeight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPointId");

                    b.HasIndex("PackageStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("App.Core.Models.PackageStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PackageStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b1941d8-20b6-4185-b4b2-35163c3aa5b1"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Created",
                            Value = 1
                        },
                        new
                        {
                            Id = new Guid("6c34937a-32b6-4baa-a387-2d914c98c943"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Loaded into Bag",
                            Value = 2
                        },
                        new
                        {
                            Id = new Guid("ddd56514-9170-4349-9c39-6259fd45a5df"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Loaded",
                            Value = 3
                        },
                        new
                        {
                            Id = new Guid("bef3d5de-ee47-4ae4-b4c3-4bd789e95859"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Unloaded",
                            Value = 4
                        });
                });

            modelBuilder.Entity("App.Core.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bca34a6-dfcc-451d-a1b8-8b2a9bafaf43"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Plate = "34 TR 321"
                        });
                });

            modelBuilder.Entity("App.Core.Models.Bag", b =>
                {
                    b.HasOne("App.Core.Models.BagStatus", "BagStatus")
                        .WithMany()
                        .HasForeignKey("BagStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Models.DeliveryPoint", "DeliveryPoint")
                        .WithMany()
                        .HasForeignKey("DeliveryPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BagStatus");

                    b.Navigation("DeliveryPoint");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("App.Core.Models.Package", b =>
                {
                    b.HasOne("App.Core.Models.DeliveryPoint", "DeliveryPoint")
                        .WithMany()
                        .HasForeignKey("DeliveryPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Models.PackageStatus", "PackageStatus")
                        .WithMany()
                        .HasForeignKey("PackageStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Core.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryPoint");

                    b.Navigation("PackageStatus");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
